// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pvz_service/pvz_service.proto

package pvz_service

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PVZ with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *PVZ) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PVZ with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PVZMultiError, or nil if none found.
func (m *PVZ) ValidateAll() error {
	return m.validate(true)
}

func (m *PVZ) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetRegistrationDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PVZValidationError{
					field:  "RegistrationDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PVZValidationError{
					field:  "RegistrationDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRegistrationDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PVZValidationError{
				field:  "RegistrationDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := _PVZ_City_InLookup[m.GetCity()]; !ok {
		err := PVZValidationError{
			field:  "City",
			reason: "value must be in list [Москва Санкт-Петербург Казань]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PVZMultiError(errors)
	}

	return nil
}

// PVZMultiError is an error wrapping multiple validation errors returned by
// PVZ.ValidateAll() if the designated constraints aren't met.
type PVZMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PVZMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PVZMultiError) AllErrors() []error { return m }

// PVZValidationError is the validation error returned by PVZ.Validate if the
// designated constraints aren't met.
type PVZValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PVZValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PVZValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PVZValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PVZValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PVZValidationError) ErrorName() string { return "PVZValidationError" }

// Error satisfies the builtin error interface
func (e PVZValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPVZ.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PVZValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PVZValidationError{}

var _PVZ_City_InLookup = map[string]struct{}{
	"Москва":          {},
	"Санкт-Петербург": {},
	"Казань":          {},
}

// Validate checks the field values on Reception with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Reception) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Reception with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReceptionMultiError, or nil
// if none found.
func (m *Reception) ValidateAll() error {
	return m.validate(true)
}

func (m *Reception) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetOpeningTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReceptionValidationError{
					field:  "OpeningTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReceptionValidationError{
					field:  "OpeningTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpeningTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReceptionValidationError{
				field:  "OpeningTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetClosingTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReceptionValidationError{
					field:  "ClosingTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReceptionValidationError{
					field:  "ClosingTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetClosingTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReceptionValidationError{
				field:  "ClosingTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PvzId

	for idx, item := range m.GetProducts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReceptionValidationError{
						field:  fmt.Sprintf("Products[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReceptionValidationError{
						field:  fmt.Sprintf("Products[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReceptionValidationError{
					field:  fmt.Sprintf("Products[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Status

	if len(errors) > 0 {
		return ReceptionMultiError(errors)
	}

	return nil
}

// ReceptionMultiError is an error wrapping multiple validation errors returned
// by Reception.ValidateAll() if the designated constraints aren't met.
type ReceptionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReceptionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReceptionMultiError) AllErrors() []error { return m }

// ReceptionValidationError is the validation error returned by
// Reception.Validate if the designated constraints aren't met.
type ReceptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReceptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReceptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReceptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReceptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReceptionValidationError) ErrorName() string { return "ReceptionValidationError" }

// Error satisfies the builtin error interface
func (e ReceptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReception.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReceptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReceptionValidationError{}

// Validate checks the field values on Product with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Product) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Product with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ProductMultiError, or nil if none found.
func (m *Product) ValidateAll() error {
	return m.validate(true)
}

func (m *Product) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetReceptionTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProductValidationError{
					field:  "ReceptionTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProductValidationError{
					field:  "ReceptionTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReceptionTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProductValidationError{
				field:  "ReceptionTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := _Product_Type_InLookup[m.GetType()]; !ok {
		err := ProductValidationError{
			field:  "Type",
			reason: "value must be in list [электроника одежда обувь]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ProductMultiError(errors)
	}

	return nil
}

// ProductMultiError is an error wrapping multiple validation errors returned
// by Product.ValidateAll() if the designated constraints aren't met.
type ProductMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductMultiError) AllErrors() []error { return m }

// ProductValidationError is the validation error returned by Product.Validate
// if the designated constraints aren't met.
type ProductValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductValidationError) ErrorName() string { return "ProductValidationError" }

// Error satisfies the builtin error interface
func (e ProductValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProduct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductValidationError{}

var _Product_Type_InLookup = map[string]struct{}{
	"электроника": {},
	"одежда":      {},
	"обувь":       {},
}

// Validate checks the field values on RegisterRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RegisterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterRequestMultiError, or nil if none found.
func (m *RegisterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Login

	if l := utf8.RuneCountInString(m.GetPassword()); l < 8 || l > 32 {
		err := RegisterRequestValidationError{
			field:  "Password",
			reason: "value length must be between 8 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _RegisterRequest_Role_InLookup[m.GetRole()]; !ok {
		err := RegisterRequestValidationError{
			field:  "Role",
			reason: "value must be in list [модератор сотрудник ПВЗ]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RegisterRequestMultiError(errors)
	}

	return nil
}

// RegisterRequestMultiError is an error wrapping multiple validation errors
// returned by RegisterRequest.ValidateAll() if the designated constraints
// aren't met.
type RegisterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterRequestMultiError) AllErrors() []error { return m }

// RegisterRequestValidationError is the validation error returned by
// RegisterRequest.Validate if the designated constraints aren't met.
type RegisterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterRequestValidationError) ErrorName() string { return "RegisterRequestValidationError" }

// Error satisfies the builtin error interface
func (e RegisterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterRequestValidationError{}

var _RegisterRequest_Role_InLookup = map[string]struct{}{
	"модератор":     {},
	"сотрудник ПВЗ": {},
}

// Validate checks the field values on LoginRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginRequestMultiError, or
// nil if none found.
func (m *LoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Login

	if l := utf8.RuneCountInString(m.GetPassword()); l < 8 || l > 32 {
		err := LoginRequestValidationError{
			field:  "Password",
			reason: "value length must be between 8 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LoginRequestMultiError(errors)
	}

	return nil
}

// LoginRequestMultiError is an error wrapping multiple validation errors
// returned by LoginRequest.ValidateAll() if the designated constraints aren't met.
type LoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRequestMultiError) AllErrors() []error { return m }

// LoginRequestValidationError is the validation error returned by
// LoginRequest.Validate if the designated constraints aren't met.
type LoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRequestValidationError) ErrorName() string { return "LoginRequestValidationError" }

// Error satisfies the builtin error interface
func (e LoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRequestValidationError{}

// Validate checks the field values on LoginResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginResponseMultiError, or
// nil if none found.
func (m *LoginResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return LoginResponseMultiError(errors)
	}

	return nil
}

// LoginResponseMultiError is an error wrapping multiple validation errors
// returned by LoginResponse.ValidateAll() if the designated constraints
// aren't met.
type LoginResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginResponseMultiError) AllErrors() []error { return m }

// LoginResponseValidationError is the validation error returned by
// LoginResponse.Validate if the designated constraints aren't met.
type LoginResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginResponseValidationError) ErrorName() string { return "LoginResponseValidationError" }

// Error satisfies the builtin error interface
func (e LoginResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginResponseValidationError{}

// Validate checks the field values on CreatePVZRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreatePVZRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePVZRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePVZRequestMultiError, or nil if none found.
func (m *CreatePVZRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePVZRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if _, ok := _CreatePVZRequest_City_InLookup[m.GetCity()]; !ok {
		err := CreatePVZRequestValidationError{
			field:  "City",
			reason: "value must be in list [Москва Санкт-Петербург Казань]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreatePVZRequestMultiError(errors)
	}

	return nil
}

// CreatePVZRequestMultiError is an error wrapping multiple validation errors
// returned by CreatePVZRequest.ValidateAll() if the designated constraints
// aren't met.
type CreatePVZRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePVZRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePVZRequestMultiError) AllErrors() []error { return m }

// CreatePVZRequestValidationError is the validation error returned by
// CreatePVZRequest.Validate if the designated constraints aren't met.
type CreatePVZRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePVZRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePVZRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePVZRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePVZRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePVZRequestValidationError) ErrorName() string { return "CreatePVZRequestValidationError" }

// Error satisfies the builtin error interface
func (e CreatePVZRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePVZRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePVZRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePVZRequestValidationError{}

var _CreatePVZRequest_City_InLookup = map[string]struct{}{
	"Москва":          {},
	"Санкт-Петербург": {},
	"Казань":          {},
}

// Validate checks the field values on CreatePVZResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreatePVZResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePVZResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePVZResponseMultiError, or nil if none found.
func (m *CreatePVZResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePVZResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreatePVZResponseMultiError(errors)
	}

	return nil
}

// CreatePVZResponseMultiError is an error wrapping multiple validation errors
// returned by CreatePVZResponse.ValidateAll() if the designated constraints
// aren't met.
type CreatePVZResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePVZResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePVZResponseMultiError) AllErrors() []error { return m }

// CreatePVZResponseValidationError is the validation error returned by
// CreatePVZResponse.Validate if the designated constraints aren't met.
type CreatePVZResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePVZResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePVZResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePVZResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePVZResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePVZResponseValidationError) ErrorName() string {
	return "CreatePVZResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePVZResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePVZResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePVZResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePVZResponseValidationError{}

// Validate checks the field values on OpenReceptionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OpenReceptionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OpenReceptionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OpenReceptionRequestMultiError, or nil if none found.
func (m *OpenReceptionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OpenReceptionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for Id

	if len(errors) > 0 {
		return OpenReceptionRequestMultiError(errors)
	}

	return nil
}

// OpenReceptionRequestMultiError is an error wrapping multiple validation
// errors returned by OpenReceptionRequest.ValidateAll() if the designated
// constraints aren't met.
type OpenReceptionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OpenReceptionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OpenReceptionRequestMultiError) AllErrors() []error { return m }

// OpenReceptionRequestValidationError is the validation error returned by
// OpenReceptionRequest.Validate if the designated constraints aren't met.
type OpenReceptionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpenReceptionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpenReceptionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpenReceptionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpenReceptionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpenReceptionRequestValidationError) ErrorName() string {
	return "OpenReceptionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OpenReceptionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpenReceptionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpenReceptionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpenReceptionRequestValidationError{}

// Validate checks the field values on OpenReceptionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OpenReceptionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OpenReceptionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OpenReceptionResponseMultiError, or nil if none found.
func (m *OpenReceptionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OpenReceptionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IdReception

	if len(errors) > 0 {
		return OpenReceptionResponseMultiError(errors)
	}

	return nil
}

// OpenReceptionResponseMultiError is an error wrapping multiple validation
// errors returned by OpenReceptionResponse.ValidateAll() if the designated
// constraints aren't met.
type OpenReceptionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OpenReceptionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OpenReceptionResponseMultiError) AllErrors() []error { return m }

// OpenReceptionResponseValidationError is the validation error returned by
// OpenReceptionResponse.Validate if the designated constraints aren't met.
type OpenReceptionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpenReceptionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpenReceptionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpenReceptionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpenReceptionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpenReceptionResponseValidationError) ErrorName() string {
	return "OpenReceptionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OpenReceptionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpenReceptionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpenReceptionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpenReceptionResponseValidationError{}

// Validate checks the field values on AddProductRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddProductRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddProductRequestMultiError, or nil if none found.
func (m *AddProductRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddProductRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for Id

	if _, ok := _AddProductRequest_Type_InLookup[m.GetType()]; !ok {
		err := AddProductRequestValidationError{
			field:  "Type",
			reason: "value must be in list [электроника одежда обувь]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddProductRequestMultiError(errors)
	}

	return nil
}

// AddProductRequestMultiError is an error wrapping multiple validation errors
// returned by AddProductRequest.ValidateAll() if the designated constraints
// aren't met.
type AddProductRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddProductRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddProductRequestMultiError) AllErrors() []error { return m }

// AddProductRequestValidationError is the validation error returned by
// AddProductRequest.Validate if the designated constraints aren't met.
type AddProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddProductRequestValidationError) ErrorName() string {
	return "AddProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddProductRequestValidationError{}

var _AddProductRequest_Type_InLookup = map[string]struct{}{
	"электроника": {},
	"одежда":      {},
	"обувь":       {},
}

// Validate checks the field values on AddProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddProductResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddProductResponseMultiError, or nil if none found.
func (m *AddProductResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddProductResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IdProduct

	if len(errors) > 0 {
		return AddProductResponseMultiError(errors)
	}

	return nil
}

// AddProductResponseMultiError is an error wrapping multiple validation errors
// returned by AddProductResponse.ValidateAll() if the designated constraints
// aren't met.
type AddProductResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddProductResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddProductResponseMultiError) AllErrors() []error { return m }

// AddProductResponseValidationError is the validation error returned by
// AddProductResponse.Validate if the designated constraints aren't met.
type AddProductResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddProductResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddProductResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddProductResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddProductResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddProductResponseValidationError) ErrorName() string {
	return "AddProductResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddProductResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddProductResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddProductResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddProductResponseValidationError{}

// Validate checks the field values on RemoveProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveProductRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveProductRequestMultiError, or nil if none found.
func (m *RemoveProductRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveProductRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for Id

	if len(errors) > 0 {
		return RemoveProductRequestMultiError(errors)
	}

	return nil
}

// RemoveProductRequestMultiError is an error wrapping multiple validation
// errors returned by RemoveProductRequest.ValidateAll() if the designated
// constraints aren't met.
type RemoveProductRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveProductRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveProductRequestMultiError) AllErrors() []error { return m }

// RemoveProductRequestValidationError is the validation error returned by
// RemoveProductRequest.Validate if the designated constraints aren't met.
type RemoveProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveProductRequestValidationError) ErrorName() string {
	return "RemoveProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveProductRequestValidationError{}

// Validate checks the field values on CloseReceptionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloseReceptionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloseReceptionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloseReceptionRequestMultiError, or nil if none found.
func (m *CloseReceptionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CloseReceptionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for Id

	if len(errors) > 0 {
		return CloseReceptionRequestMultiError(errors)
	}

	return nil
}

// CloseReceptionRequestMultiError is an error wrapping multiple validation
// errors returned by CloseReceptionRequest.ValidateAll() if the designated
// constraints aren't met.
type CloseReceptionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloseReceptionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloseReceptionRequestMultiError) AllErrors() []error { return m }

// CloseReceptionRequestValidationError is the validation error returned by
// CloseReceptionRequest.Validate if the designated constraints aren't met.
type CloseReceptionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloseReceptionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloseReceptionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloseReceptionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloseReceptionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloseReceptionRequestValidationError) ErrorName() string {
	return "CloseReceptionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CloseReceptionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloseReceptionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloseReceptionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloseReceptionRequestValidationError{}

// Validate checks the field values on GetFilteredPVZsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFilteredPVZsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFilteredPVZsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFilteredPVZsRequestMultiError, or nil if none found.
func (m *GetFilteredPVZsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFilteredPVZsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if m.GetStart() == nil {
		err := GetFilteredPVZsRequestValidationError{
			field:  "Start",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetFinish() == nil {
		err := GetFilteredPVZsRequestValidationError{
			field:  "Finish",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Limit

	// no validation rules for Offset

	if len(errors) > 0 {
		return GetFilteredPVZsRequestMultiError(errors)
	}

	return nil
}

// GetFilteredPVZsRequestMultiError is an error wrapping multiple validation
// errors returned by GetFilteredPVZsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetFilteredPVZsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFilteredPVZsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFilteredPVZsRequestMultiError) AllErrors() []error { return m }

// GetFilteredPVZsRequestValidationError is the validation error returned by
// GetFilteredPVZsRequest.Validate if the designated constraints aren't met.
type GetFilteredPVZsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFilteredPVZsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFilteredPVZsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFilteredPVZsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFilteredPVZsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFilteredPVZsRequestValidationError) ErrorName() string {
	return "GetFilteredPVZsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFilteredPVZsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFilteredPVZsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFilteredPVZsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFilteredPVZsRequestValidationError{}

// Validate checks the field values on GetFilteredPVZsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFilteredPVZsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFilteredPVZsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFilteredPVZsResponseMultiError, or nil if none found.
func (m *GetFilteredPVZsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFilteredPVZsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPvzs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetFilteredPVZsResponseValidationError{
						field:  fmt.Sprintf("Pvzs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetFilteredPVZsResponseValidationError{
						field:  fmt.Sprintf("Pvzs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetFilteredPVZsResponseValidationError{
					field:  fmt.Sprintf("Pvzs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetFilteredPVZsResponseMultiError(errors)
	}

	return nil
}

// GetFilteredPVZsResponseMultiError is an error wrapping multiple validation
// errors returned by GetFilteredPVZsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetFilteredPVZsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFilteredPVZsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFilteredPVZsResponseMultiError) AllErrors() []error { return m }

// GetFilteredPVZsResponseValidationError is the validation error returned by
// GetFilteredPVZsResponse.Validate if the designated constraints aren't met.
type GetFilteredPVZsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFilteredPVZsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFilteredPVZsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFilteredPVZsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFilteredPVZsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFilteredPVZsResponseValidationError) ErrorName() string {
	return "GetFilteredPVZsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetFilteredPVZsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFilteredPVZsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFilteredPVZsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFilteredPVZsResponseValidationError{}

// Validate checks the field values on DummyLoginRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DummyLoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DummyLoginRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DummyLoginRequestMultiError, or nil if none found.
func (m *DummyLoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DummyLoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _DummyLoginRequest_Role_InLookup[m.GetRole()]; !ok {
		err := DummyLoginRequestValidationError{
			field:  "Role",
			reason: "value must be in list [модератор сотрудник ПВЗ]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DummyLoginRequestMultiError(errors)
	}

	return nil
}

// DummyLoginRequestMultiError is an error wrapping multiple validation errors
// returned by DummyLoginRequest.ValidateAll() if the designated constraints
// aren't met.
type DummyLoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DummyLoginRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DummyLoginRequestMultiError) AllErrors() []error { return m }

// DummyLoginRequestValidationError is the validation error returned by
// DummyLoginRequest.Validate if the designated constraints aren't met.
type DummyLoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DummyLoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DummyLoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DummyLoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DummyLoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DummyLoginRequestValidationError) ErrorName() string {
	return "DummyLoginRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DummyLoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDummyLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DummyLoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DummyLoginRequestValidationError{}

var _DummyLoginRequest_Role_InLookup = map[string]struct{}{
	"модератор":     {},
	"сотрудник ПВЗ": {},
}

// Validate checks the field values on DummyLoginResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DummyLoginResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DummyLoginResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DummyLoginResponseMultiError, or nil if none found.
func (m *DummyLoginResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DummyLoginResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return DummyLoginResponseMultiError(errors)
	}

	return nil
}

// DummyLoginResponseMultiError is an error wrapping multiple validation errors
// returned by DummyLoginResponse.ValidateAll() if the designated constraints
// aren't met.
type DummyLoginResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DummyLoginResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DummyLoginResponseMultiError) AllErrors() []error { return m }

// DummyLoginResponseValidationError is the validation error returned by
// DummyLoginResponse.Validate if the designated constraints aren't met.
type DummyLoginResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DummyLoginResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DummyLoginResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DummyLoginResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DummyLoginResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DummyLoginResponseValidationError) ErrorName() string {
	return "DummyLoginResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DummyLoginResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDummyLoginResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DummyLoginResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DummyLoginResponseValidationError{}
