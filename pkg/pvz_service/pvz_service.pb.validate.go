// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pvz_service/pvz_service.proto

package pvz_service

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PVZ with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *PVZ) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PVZ with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PVZMultiError, or nil if none found.
func (m *PVZ) ValidateAll() error {
	return m.validate(true)
}

func (m *PVZ) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IdPVZ

	if all {
		switch v := interface{}(m.GetRegistrationDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PVZValidationError{
					field:  "RegistrationDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PVZValidationError{
					field:  "RegistrationDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRegistrationDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PVZValidationError{
				field:  "RegistrationDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := _PVZ_City_InLookup[m.GetCity()]; !ok {
		err := PVZValidationError{
			field:  "City",
			reason: "value must be in list [Москва Санкт-Петербург Казань]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PVZMultiError(errors)
	}

	return nil
}

// PVZMultiError is an error wrapping multiple validation errors returned by
// PVZ.ValidateAll() if the designated constraints aren't met.
type PVZMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PVZMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PVZMultiError) AllErrors() []error { return m }

// PVZValidationError is the validation error returned by PVZ.Validate if the
// designated constraints aren't met.
type PVZValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PVZValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PVZValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PVZValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PVZValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PVZValidationError) ErrorName() string { return "PVZValidationError" }

// Error satisfies the builtin error interface
func (e PVZValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPVZ.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PVZValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PVZValidationError{}

var _PVZ_City_InLookup = map[string]struct{}{
	"Москва":          {},
	"Санкт-Петербург": {},
	"Казань":          {},
}

// Validate checks the field values on Reception with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Reception) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Reception with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReceptionMultiError, or nil
// if none found.
func (m *Reception) ValidateAll() error {
	return m.validate(true)
}

func (m *Reception) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IdReception

	if all {
		switch v := interface{}(m.GetOpeningTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReceptionValidationError{
					field:  "OpeningTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReceptionValidationError{
					field:  "OpeningTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpeningTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReceptionValidationError{
				field:  "OpeningTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetClosingTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReceptionValidationError{
					field:  "ClosingTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReceptionValidationError{
					field:  "ClosingTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetClosingTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReceptionValidationError{
				field:  "ClosingTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IdPVZ

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReceptionValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReceptionValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReceptionValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Status

	if len(errors) > 0 {
		return ReceptionMultiError(errors)
	}

	return nil
}

// ReceptionMultiError is an error wrapping multiple validation errors returned
// by Reception.ValidateAll() if the designated constraints aren't met.
type ReceptionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReceptionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReceptionMultiError) AllErrors() []error { return m }

// ReceptionValidationError is the validation error returned by
// Reception.Validate if the designated constraints aren't met.
type ReceptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReceptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReceptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReceptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReceptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReceptionValidationError) ErrorName() string { return "ReceptionValidationError" }

// Error satisfies the builtin error interface
func (e ReceptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReception.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReceptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReceptionValidationError{}

// Validate checks the field values on Item with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Item with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ItemMultiError, or nil if none found.
func (m *Item) ValidateAll() error {
	return m.validate(true)
}

func (m *Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IdItem

	if all {
		switch v := interface{}(m.GetReceptionTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ItemValidationError{
					field:  "ReceptionTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ItemValidationError{
					field:  "ReceptionTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReceptionTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ItemValidationError{
				field:  "ReceptionTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := _Item_Type_InLookup[m.GetType()]; !ok {
		err := ItemValidationError{
			field:  "Type",
			reason: "value must be in list [электроника одежда обувь]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ItemMultiError(errors)
	}

	return nil
}

// ItemMultiError is an error wrapping multiple validation errors returned by
// Item.ValidateAll() if the designated constraints aren't met.
type ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ItemMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ItemMultiError) AllErrors() []error { return m }

// ItemValidationError is the validation error returned by Item.Validate if the
// designated constraints aren't met.
type ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ItemValidationError) ErrorName() string { return "ItemValidationError" }

// Error satisfies the builtin error interface
func (e ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ItemValidationError{}

var _Item_Type_InLookup = map[string]struct{}{
	"электроника": {},
	"одежда":      {},
	"обувь":       {},
}

// Validate checks the field values on RegisterRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RegisterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterRequestMultiError, or nil if none found.
func (m *RegisterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Login

	if l := utf8.RuneCountInString(m.GetPassword()); l < 8 || l > 32 {
		err := RegisterRequestValidationError{
			field:  "Password",
			reason: "value length must be between 8 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _RegisterRequest_Role_InLookup[m.GetRole()]; !ok {
		err := RegisterRequestValidationError{
			field:  "Role",
			reason: "value must be in list [модератор сотрудник ПВЗ]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RegisterRequestMultiError(errors)
	}

	return nil
}

// RegisterRequestMultiError is an error wrapping multiple validation errors
// returned by RegisterRequest.ValidateAll() if the designated constraints
// aren't met.
type RegisterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterRequestMultiError) AllErrors() []error { return m }

// RegisterRequestValidationError is the validation error returned by
// RegisterRequest.Validate if the designated constraints aren't met.
type RegisterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterRequestValidationError) ErrorName() string { return "RegisterRequestValidationError" }

// Error satisfies the builtin error interface
func (e RegisterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterRequestValidationError{}

var _RegisterRequest_Role_InLookup = map[string]struct{}{
	"модератор":     {},
	"сотрудник ПВЗ": {},
}

// Validate checks the field values on LoginRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginRequestMultiError, or
// nil if none found.
func (m *LoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Login

	if l := utf8.RuneCountInString(m.GetPassword()); l < 8 || l > 32 {
		err := LoginRequestValidationError{
			field:  "Password",
			reason: "value length must be between 8 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LoginRequestMultiError(errors)
	}

	return nil
}

// LoginRequestMultiError is an error wrapping multiple validation errors
// returned by LoginRequest.ValidateAll() if the designated constraints aren't met.
type LoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRequestMultiError) AllErrors() []error { return m }

// LoginRequestValidationError is the validation error returned by
// LoginRequest.Validate if the designated constraints aren't met.
type LoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRequestValidationError) ErrorName() string { return "LoginRequestValidationError" }

// Error satisfies the builtin error interface
func (e LoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRequestValidationError{}

// Validate checks the field values on LoginResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginResponseMultiError, or
// nil if none found.
func (m *LoginResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return LoginResponseMultiError(errors)
	}

	return nil
}

// LoginResponseMultiError is an error wrapping multiple validation errors
// returned by LoginResponse.ValidateAll() if the designated constraints
// aren't met.
type LoginResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginResponseMultiError) AllErrors() []error { return m }

// LoginResponseValidationError is the validation error returned by
// LoginResponse.Validate if the designated constraints aren't met.
type LoginResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginResponseValidationError) ErrorName() string { return "LoginResponseValidationError" }

// Error satisfies the builtin error interface
func (e LoginResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginResponseValidationError{}

// Validate checks the field values on CreatePVZRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreatePVZRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePVZRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePVZRequestMultiError, or nil if none found.
func (m *CreatePVZRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePVZRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if _, ok := _CreatePVZRequest_City_InLookup[m.GetCity()]; !ok {
		err := CreatePVZRequestValidationError{
			field:  "City",
			reason: "value must be in list [Москва Санкт-Петербург Казань]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreatePVZRequestMultiError(errors)
	}

	return nil
}

// CreatePVZRequestMultiError is an error wrapping multiple validation errors
// returned by CreatePVZRequest.ValidateAll() if the designated constraints
// aren't met.
type CreatePVZRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePVZRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePVZRequestMultiError) AllErrors() []error { return m }

// CreatePVZRequestValidationError is the validation error returned by
// CreatePVZRequest.Validate if the designated constraints aren't met.
type CreatePVZRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePVZRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePVZRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePVZRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePVZRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePVZRequestValidationError) ErrorName() string { return "CreatePVZRequestValidationError" }

// Error satisfies the builtin error interface
func (e CreatePVZRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePVZRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePVZRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePVZRequestValidationError{}

var _CreatePVZRequest_City_InLookup = map[string]struct{}{
	"Москва":          {},
	"Санкт-Петербург": {},
	"Казань":          {},
}

// Validate checks the field values on CreatePVZResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreatePVZResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePVZResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePVZResponseMultiError, or nil if none found.
func (m *CreatePVZResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePVZResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IdPVZ

	if len(errors) > 0 {
		return CreatePVZResponseMultiError(errors)
	}

	return nil
}

// CreatePVZResponseMultiError is an error wrapping multiple validation errors
// returned by CreatePVZResponse.ValidateAll() if the designated constraints
// aren't met.
type CreatePVZResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePVZResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePVZResponseMultiError) AllErrors() []error { return m }

// CreatePVZResponseValidationError is the validation error returned by
// CreatePVZResponse.Validate if the designated constraints aren't met.
type CreatePVZResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePVZResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePVZResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePVZResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePVZResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePVZResponseValidationError) ErrorName() string {
	return "CreatePVZResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePVZResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePVZResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePVZResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePVZResponseValidationError{}

// Validate checks the field values on OpenReceptionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OpenReceptionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OpenReceptionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OpenReceptionRequestMultiError, or nil if none found.
func (m *OpenReceptionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OpenReceptionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for IdPVZ

	if len(errors) > 0 {
		return OpenReceptionRequestMultiError(errors)
	}

	return nil
}

// OpenReceptionRequestMultiError is an error wrapping multiple validation
// errors returned by OpenReceptionRequest.ValidateAll() if the designated
// constraints aren't met.
type OpenReceptionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OpenReceptionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OpenReceptionRequestMultiError) AllErrors() []error { return m }

// OpenReceptionRequestValidationError is the validation error returned by
// OpenReceptionRequest.Validate if the designated constraints aren't met.
type OpenReceptionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpenReceptionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpenReceptionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpenReceptionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpenReceptionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpenReceptionRequestValidationError) ErrorName() string {
	return "OpenReceptionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OpenReceptionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpenReceptionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpenReceptionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpenReceptionRequestValidationError{}

// Validate checks the field values on AddItemRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddItemRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddItemRequestMultiError,
// or nil if none found.
func (m *AddItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for IdPVZ

	if _, ok := _AddItemRequest_Type_InLookup[m.GetType()]; !ok {
		err := AddItemRequestValidationError{
			field:  "Type",
			reason: "value must be in list [электроника одежда обувь]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddItemRequestMultiError(errors)
	}

	return nil
}

// AddItemRequestMultiError is an error wrapping multiple validation errors
// returned by AddItemRequest.ValidateAll() if the designated constraints
// aren't met.
type AddItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddItemRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddItemRequestMultiError) AllErrors() []error { return m }

// AddItemRequestValidationError is the validation error returned by
// AddItemRequest.Validate if the designated constraints aren't met.
type AddItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddItemRequestValidationError) ErrorName() string { return "AddItemRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddItemRequestValidationError{}

var _AddItemRequest_Type_InLookup = map[string]struct{}{
	"электроника": {},
	"одежда":      {},
	"обувь":       {},
}

// Validate checks the field values on AddItemResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddItemResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddItemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddItemResponseMultiError, or nil if none found.
func (m *AddItemResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddItemResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IdItem

	if len(errors) > 0 {
		return AddItemResponseMultiError(errors)
	}

	return nil
}

// AddItemResponseMultiError is an error wrapping multiple validation errors
// returned by AddItemResponse.ValidateAll() if the designated constraints
// aren't met.
type AddItemResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddItemResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddItemResponseMultiError) AllErrors() []error { return m }

// AddItemResponseValidationError is the validation error returned by
// AddItemResponse.Validate if the designated constraints aren't met.
type AddItemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddItemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddItemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddItemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddItemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddItemResponseValidationError) ErrorName() string { return "AddItemResponseValidationError" }

// Error satisfies the builtin error interface
func (e AddItemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddItemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddItemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddItemResponseValidationError{}

// Validate checks the field values on RemoveItemRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RemoveItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveItemRequestMultiError, or nil if none found.
func (m *RemoveItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for IdItem

	if len(errors) > 0 {
		return RemoveItemRequestMultiError(errors)
	}

	return nil
}

// RemoveItemRequestMultiError is an error wrapping multiple validation errors
// returned by RemoveItemRequest.ValidateAll() if the designated constraints
// aren't met.
type RemoveItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveItemRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveItemRequestMultiError) AllErrors() []error { return m }

// RemoveItemRequestValidationError is the validation error returned by
// RemoveItemRequest.Validate if the designated constraints aren't met.
type RemoveItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveItemRequestValidationError) ErrorName() string {
	return "RemoveItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveItemRequestValidationError{}

// Validate checks the field values on CloseReceptionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloseReceptionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloseReceptionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloseReceptionRequestMultiError, or nil if none found.
func (m *CloseReceptionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CloseReceptionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for IdPVZ

	if len(errors) > 0 {
		return CloseReceptionRequestMultiError(errors)
	}

	return nil
}

// CloseReceptionRequestMultiError is an error wrapping multiple validation
// errors returned by CloseReceptionRequest.ValidateAll() if the designated
// constraints aren't met.
type CloseReceptionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloseReceptionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloseReceptionRequestMultiError) AllErrors() []error { return m }

// CloseReceptionRequestValidationError is the validation error returned by
// CloseReceptionRequest.Validate if the designated constraints aren't met.
type CloseReceptionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloseReceptionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloseReceptionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloseReceptionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloseReceptionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloseReceptionRequestValidationError) ErrorName() string {
	return "CloseReceptionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CloseReceptionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloseReceptionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloseReceptionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloseReceptionRequestValidationError{}

// Validate checks the field values on GetPVZDataRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPVZDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPVZDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPVZDataRequestMultiError, or nil if none found.
func (m *GetPVZDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPVZDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if all {
		switch v := interface{}(m.GetStart()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPVZDataRequestValidationError{
					field:  "Start",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPVZDataRequestValidationError{
					field:  "Start",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStart()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPVZDataRequestValidationError{
				field:  "Start",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFinish()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPVZDataRequestValidationError{
					field:  "Finish",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPVZDataRequestValidationError{
					field:  "Finish",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFinish()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPVZDataRequestValidationError{
				field:  "Finish",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPVZDataRequestMultiError(errors)
	}

	return nil
}

// GetPVZDataRequestMultiError is an error wrapping multiple validation errors
// returned by GetPVZDataRequest.ValidateAll() if the designated constraints
// aren't met.
type GetPVZDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPVZDataRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPVZDataRequestMultiError) AllErrors() []error { return m }

// GetPVZDataRequestValidationError is the validation error returned by
// GetPVZDataRequest.Validate if the designated constraints aren't met.
type GetPVZDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPVZDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPVZDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPVZDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPVZDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPVZDataRequestValidationError) ErrorName() string {
	return "GetPVZDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPVZDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPVZDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPVZDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPVZDataRequestValidationError{}

// Validate checks the field values on GetPVZDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPVZDataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPVZDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPVZDataResponseMultiError, or nil if none found.
func (m *GetPVZDataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPVZDataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPvzs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPVZDataResponseValidationError{
						field:  fmt.Sprintf("Pvzs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPVZDataResponseValidationError{
						field:  fmt.Sprintf("Pvzs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPVZDataResponseValidationError{
					field:  fmt.Sprintf("Pvzs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetPVZDataResponseMultiError(errors)
	}

	return nil
}

// GetPVZDataResponseMultiError is an error wrapping multiple validation errors
// returned by GetPVZDataResponse.ValidateAll() if the designated constraints
// aren't met.
type GetPVZDataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPVZDataResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPVZDataResponseMultiError) AllErrors() []error { return m }

// GetPVZDataResponseValidationError is the validation error returned by
// GetPVZDataResponse.Validate if the designated constraints aren't met.
type GetPVZDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPVZDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPVZDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPVZDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPVZDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPVZDataResponseValidationError) ErrorName() string {
	return "GetPVZDataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPVZDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPVZDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPVZDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPVZDataResponseValidationError{}
